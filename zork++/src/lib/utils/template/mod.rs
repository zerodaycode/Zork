pub mod resources;

use crate::config_file::compiler::CppCompiler;
//use crate::utils::constants::autogenerated_example;
use log::info;
use std::io::Write;
use std::process::Command;
use std::{
    fs::{DirBuilder, File},
    path::Path,
};

/// Generates a new C++ standarized empty base project
/// with a pre-designed structure to organize the
/// user code in a modern fashion way.
///
/// Base template for the project files and folders:
///    - ./ifc/<project_name>
///        - math.<extension>
///    - ./src/<project_name>
///       - math.<extension>
///       - math2.<extension>
///    - main.cpp
///    - test
///    - dependencies
pub fn create_templated_project(project_name: String, git: bool, compiler: CppCompiler) {
    let project_root = Path::new(".").join(&project_name);
    info!("Creating the autogenerated template project");

    let path_ifc = project_root.join("ifc");
    let path_src = project_root.join("src");
    let path_test = project_root.join("test");
    let path_dependencies = project_root.join("deps");

    create_directory(&project_root);
    create_directory(&path_ifc);
    create_directory(&path_src);
    create_directory(&path_test);
    create_directory(&path_dependencies);

    create_file(
        &path_ifc,
        &format!("{}.{}", "math", compiler.get_default_module_extension()),
        resources::IFC_MOD_FILE.as_bytes(),
    );
    create_file(
        &path_src,
        "main.cpp", // TODO from constants
        resources::MAIN.as_bytes(),
    );
    create_file(&path_src, "math.cpp", resources::SRC_MOD_FILE.as_bytes());
    create_file(&path_src, "math2.cpp", resources::SRC_MOD_FILE_2.as_bytes());

    // TODO The replaces must dissapear in the next PR
    let mut zork_conf = resources::CONFIG_FILE
        .replace("<project_name>", &project_name)
        .replace("<autog_test>", &project_name)
        .replace("<autogenerated_executable>", &project_name);

    if cfg!(windows) {
        zork_conf = zork_conf.replace("libcpp", "stdlib")
    }
    create_file(
        &project_root,
        resources::CONFIG_FILE_NAME,
        zork_conf.as_bytes(),
    );

    if git {
        Command::new("git")
            .current_dir(project_root)
            .arg("init")
            .spawn()
            .expect("Error initializing a new GIT repository");
    }
}

fn create_file<'a>(path: &Path, filename: &'a str, buff_write: &'a [u8]) {
    let mut file = File::create(path.join(filename))
        .unwrap_or_else(|_| panic!("Error creating the example file: {filename}",));

    file.write_all(buff_write)
        .unwrap_or_else(|_| panic!("Error writting the example file: {filename}",));
}

fn create_directory(path_create: &Path) {
    DirBuilder::new()
        .recursive(true)
        .create(path_create)
        .unwrap_or_else(|_| panic!("Error creating directory: {:?}", path_create.as_os_str()))
}
