extern crate core;

pub mod cache;
pub mod cli;
pub mod compiler;
pub mod config_file;
pub mod domain;
pub mod project_model;
pub mod utils;

/// The entry point for the execution of the program.
///
/// This module existence is motivated to let us run
/// integration tests for the whole operations of the program
/// without having to do fancy work about checking the
/// data sent to stdout/stderr
pub mod worker {
    use crate::config_file::ZorkConfigFile;
    use crate::project_model;
    use crate::{config_file, utils::fs::get_project_root_absolute_path};
    use std::{fs, path::Path};

    use crate::utils::constants::{dir_names, error_messages, ZORK};
    use crate::{
        cache::{self, ZorkCache},
        cli::{
            input::{CliArgs, Command},
            output::commands,
        },
        compiler::generate_commands,
        project_model::{compiler::CppCompiler, ZorkModel},
        utils::{
            self,
            reader::{find_config_files, ConfigFile},
            template::create_templated_project,
        },
    };
    use color_eyre::{eyre::Context, Report, Result};

    /// The main work of the project. Runs the tasks
    /// inputted in the CLI
    pub fn run_zork(cli_args: &CliArgs) -> std::result::Result<(), Report> {
        let project_root = cli_args
            .root
            .as_deref()
            .map(Path::new)
            .unwrap_or(Path::new("."));
        let abs_project_root = get_project_root_absolute_path(project_root)?;

        if let Command::New {
            ref name,
            git,
            compiler,
            template,
        } = cli_args.command
        {
            // TODO: pass here the driver's path? so it's already configured on the autogenerated
            // zork.toml file?
            return create_templated_project(
                &abs_project_root,
                name,
                git,
                compiler.into(),
                template,
            );
        };

        let config_files: Vec<ConfigFile> = find_config_files(project_root, &cli_args.match_files)
            .with_context(|| "We didn't found a valid Zork++ configuration file")?;

        for config_file in config_files {
            let cfg_path = &config_file.path;
            log::debug!(
                "Launching a Zork++ work event for the configuration file: {:?}",
                cfg_path,
            );
            let raw_file = fs::read_to_string(cfg_path)
                .with_context(|| format!("{}: {:?}", error_messages::READ_CFG_FILE, cfg_path))?;

            let config = config_file::zork_cfg_from_file(raw_file.as_str())
                .with_context(|| error_messages::PARSE_CFG_FILE)?;

            create_output_directory(&config)?; // TODO: avoid this call without check if exists
            let cache = cache::load(&config, cli_args)?;
            // TODO: Big one, need to call cache.load_tasks or whatever, or metadata won't be
            // loaded

            let program_data = project_model::load(config, cli_args, &abs_project_root)?;

            do_main_work_based_on_cli_input(cli_args, &program_data, cache).with_context(|| {
                format!(
                    "{}: {:?}",
                    error_messages::FAILED_BUILD_FOR_CFG_FILE,
                    cfg_path
                )
            })?;
        }

        Ok(())
    }

    /// Helper for reduce the cyclomatic complexity of the main fn.
    ///
    /// Contains the main calls to the generation of the compilers commands lines,
    /// the calls to the process that runs those, the autorun the generated
    /// binaries, the tests declared for the projects...
    fn do_main_work_based_on_cli_input<'a>(
        cli_args: &'a CliArgs,
        program_data: &'a ZorkModel<'a>,
        mut cache: ZorkCache<'a>,
    ) -> Result<()> {
        // TODO: if we split the line below, we can only check for changes on the modified
        // files IF and only IF the configuration files has been modified
        // so we will have the need_to_rebuild in other place before the commands generation
        // one option is directly on the reader, by just checking it's modification datetime (for the tu)
        //
        // other is to have just a separate function that only passes the required data
        // like cache to be modified and the new ones
        generate_commands(program_data, &mut cache, cli_args)
            .with_context(|| error_messages::FAILURE_GENERATING_COMMANDS)?;

        let execution_result = match cli_args.command {
            Command::Build => commands::run_generated_commands(program_data, &mut cache),
            Command::Run | Command::Test => {
                match commands::run_generated_commands(program_data, &mut cache) {
                    Ok(_) => commands::autorun_generated_binary(
                        &program_data.compiler.cpp_compiler,
                        &program_data.build.output_dir,
                        &program_data.executable.executable_name,
                    ),
                    Err(e) => Err(e),
                }
            }
            _ => todo!("{}", error_messages::CLI_ARGS_CMD_NEW_BRANCH),
        };

        cache.save(program_data)?;

        execution_result
    }

    /// Creates the directory for output the elements generated
    /// during the build process based on the client specification.
    ///
    /// Also, it will generate the
    /// ['<output_build_dir>'/zork], which is a subfolder
    /// where Zork dumps the things that needs to work correctly
    /// under different conditions.
    ///
    /// Under /zork, some new folders are created:
    /// - a /intrinsics folder in created as well,
    /// where different specific details of Zork++ are stored
    /// related with the C++ compilers
    ///
    /// - a /cache folder, where lives the metadata cached by Zork++
    /// in order to track different aspects of the program (last time
    /// modified files, last process build time...)
    fn create_output_directory(config: &ZorkConfigFile) -> Result<()> {
        let compiler: CppCompiler = config.compiler.cpp_compiler.into();
        let compiler_name = compiler.as_ref();
        let binding = config
            .build
            .as_ref()
            .and_then(|build_attr| build_attr.output_dir)
            .unwrap_or("out");
        let out_dir = Path::new(&binding);

        // Recursively create the directories below and all of its parent components if they are missing
        let modules_path = out_dir.join(compiler_name).join(dir_names::MODULES);

        let zork_path = out_dir.join(ZORK);
        let zork_cache_path = zork_path.join(dir_names::CACHE);
        let zork_intrinsics_path = zork_path.join(dir_names::INTRINSICS);

        utils::fs::create_directory(&out_dir.join(compiler_name).join(dir_names::OBJECT_FILES))?;

        utils::fs::create_directory(&modules_path.join(dir_names::INTERFACES))?;
        utils::fs::create_directory(&modules_path.join(dir_names::IMPLEMENTATIONS))?;
        utils::fs::create_directory(&modules_path.join(dir_names::STD))?;

        utils::fs::create_directory(&zork_cache_path)?;
        utils::fs::create_directory(&zork_intrinsics_path)?;

        // TODO: This possibly gonna be temporary
        if compiler.eq(&CppCompiler::CLANG) && cfg!(target_os = "windows") {
            utils::fs::create_file(
                &zork_intrinsics_path,
                "std.h",
                utils::template::resources::STD_HEADER.as_bytes(),
            )?;

            utils::fs::create_file(
                &zork_intrinsics_path,
                "zork.modulemap",
                utils::template::resources::ZORK_MODULEMAP.as_bytes(),
            )?;
        }

        Ok(())
    }

    #[cfg(test)]
    mod tests {
        use crate::project_model::compiler::CppCompiler;
        use crate::utils::template::resources::CONFIG_FILE;
        use color_eyre::Result;
        use tempfile::tempdir;

        use crate::config_file::{self, ZorkConfigFile};
        use crate::utils::constants::{dir_names, ZORK};

        #[test]
        fn test_creation_directories() -> Result<()> {
            let temp = tempdir()?;
            let temp_path = temp.path();
            let out_dir = temp_path.join(dir_names::DEFAULT_OUTPUT_DIR);

            let zork_dir = out_dir.join(ZORK);

            let normalized_cfg_file = CONFIG_FILE
                .replace("<compiler>", "clang")
                .replace("<std_lib>", "LIBCPP")
                .replace('\\', "/");
            let zcf: ZorkConfigFile = config_file::zork_cfg_from_file(&normalized_cfg_file)?;

            let compiler: CppCompiler = zcf.compiler.cpp_compiler.into();
            let compiler_folder_dir = out_dir.join(compiler.as_ref());
            let modules_path = compiler_folder_dir.join("modules");

            // This should create and out/ directory at the root of the tmp path
            super::create_output_directory(&zcf)?;

            assert!(out_dir.exists());

            assert!(compiler_folder_dir.exists());

            assert!(compiler_folder_dir.join(dir_names::OBJECT_FILES).exists());
            assert!(modules_path.exists());

            assert!(modules_path.join(dir_names::INTERFACES).exists());
            assert!(modules_path.join(dir_names::IMPLEMENTATIONS).exists());
            assert!(modules_path.join(dir_names::STD).exists());

            assert!(zork_dir.exists());
            assert!(zork_dir.join(dir_names::CACHE).exists());
            assert!(zork_dir.join(dir_names::INTRINSICS).exists());

            Ok(())
        }
    }
}
